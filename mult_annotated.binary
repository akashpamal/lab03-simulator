Variables in memory:
x: 0x01
y: 0x03
rolling_sum: 0x80
index: 0x81

Program as comments:



60 01 # 6 0_0 (0x01) // store 0x05 in r0. This represents x right now. the value in parenthesis is the next byte. With the example here, we're multiplying 5 and 6.
64 03 # 6 1_0 (0x03) // store 0x06 in r1. This represents y right now
68 00 # 6 2_0 (0x00) // store 0 in r2. This represents rolling_sum right now
6C 00 # 6 3_0 (0x00) // store 0 in r3. This represents index right now


// Before the meat and potatos part of our loop, we want to reload all our variables from memory and put them back into the registers
60 01 # 6 0_0 (0x01) // Load x back from memory
64 03 # 6 1_0 (0x03) // Load y back from memory (although this line should be unnecessary)
6B 80 # 6 2_3 (0x80) // Load rolling_sum back from memory


18 # 1 2_0 // rolling_sum += x i.e. r2 += r0

6D 01 # 6 3_1 (1)// index += 1. r3 += value_at_pc_plus_1. This instruction will be 2 bytes long.


// (index - y) and rolling_sum are going to share the same register.
// When calculating index-y, temporarily store rolling_sum into memory, do the appropriate math, and then load it back into the register.

60 80 # 6 0_0 (0x80) // set r0 to 0x80. We have to do this because there's no instruction to directly write to a given memory address
48 # 4 2_0 // store rolling_sum at 0x80. i.e. store the value of r2 at address 0x80 i.e. store the value of r2 at the memory address inside r0
68 00 # 6 2_0 (0x00) // set r2 to index i.e. r2 = 0, r2 += r3
1B # 1 2_3

// The next couple of lines are to do index -= y
55 # 5 1_1 // First, negate y i.e. negate r1 i.e. r1 = -r1
19 # 1 2_1 // Then, add the new (negated) y to index i.e. r2 += r1. now the value inside r2 is index - y
55 # 5 1_1 // Undo the negation of y i.e. r1 = -r1

// At this point, the registers store, in order: 0x80, y, (index - y), index
63 09 # 6 0_3 (0x09) // Store the memory address where our while-loop begins inside r0 i.e. r0 = 0x09 or whatever the memory address is. MAKE SURE THE MEMORY ADDRESS IS IN HEX

// At this point, the registers store, in order: 0x09, y, (index - y), index. 0x09 is the memory address where we want to begin our while-loop

78 # 7 2_0 // if (index - y) <=0, set pc = the place where we want to jump to. i.e. if r2 <= 0, set pc to the instruction where we add x to the rolling sum
6B 80 # 6 2_3 (0x80) // load rolling_sum back from memory. i.e. load the value at address 0x80 into r2 (using instruction 6.3) Another way to do this is using instruction 3, assuming r0 still says 0x80


60 01 # 6 0_0 (0x01) // Load x back from memory
64 03 # 6 1_0 (0x03) // Load y back from memory (although this line should be unnecessary)
6B 80 # 6 2_3 (0x80) // Load rolling_sum back from memory


// In the next couple of lines, subtract x from rolling_sum. i.e. r2 -= r
51 # 5 0_1 // x = -x i.e. r0 = -r0
18 # 1 2_0 // add the newly negated x to rolling_sum i.e. r2 += r0
51 # 5 0_1 // undo the negation of x i.e. r0 = -r0

// store the product at address 0xA0
64 A0 # 6 1_0 (0xA0) // r0 = 0xA0
48 # 4 2_0 // store rolling_sum at 0xA0. i.e. store the value of r2 at address 0xA0 i.e. store the value of r2 at the memory address inside r0


// halt once the program is complete
# 1 000 0000





Java code:

int x = 10;
int y = 9;
int rolling_sum = 0;
int index = 0;

do {
    rolling_sum += x;
    index += 1;
} while (index - y <= 0);
rolling_sum -= x;
System.out.println("Product: " + rolling_sum);